## OAuth2 Proxy Config File
## https://github.com/oauth2-proxy/oauth2-proxy

## <addr>:<port> to listen on for HTTP/HTTPS clients
http_address = ":4180"
# https_address = ":443"

## Are we running behind a reverse proxy? Will not accept headers like X-Real-Ip unless this is set.
reverse_proxy = true

## TLS Settings
# tls_cert_file = ""
# tls_key_file = ""

## the OAuth Redirect URL.
# defaults to the "https://" + requested host header + "/oauth2/callback"
redirect_url = "http://10.0.110.15:4180/oauth2/callback"

## the http url(s) of the upstream endpoint. If multiple, routing is based on path
upstreams = [
     "http://10.0.110.15/api/hydrology/dbms/",
     "http://10.0.110.15:15672/",
     "http://rproxy:9999/sys/monitor/log/"
]

## Additional configurations for upstreams different proxy target can have two different roles, one is for read only, and the other is for write
upstreamsExt = [
    {
        Upstream       = "http://10.0.110.15/api/hydrology/dbms/",
        GuestRoleName  = "企业管理员",
        GuestUser      = "",
        GuestPassword  = "",
        AdminRoleName  = "",
        AdminUser      = "",
        AdminPassword  = ""
    },
    {
        Upstream =  "http://10.0.110.15:15672/",
        GuestRoleName = "企业管理员",
        GuestUser   =  "guest",
        GuestPassword = "guest323",
        AdminRoleName = "内部管理员",
        AdminUser     ="admin",
        AdminPassword = "admin323"
    },
    {
        Upstream =  "http://rproxy:9999/sys/monitor/log/",
        GuestRoleName = "企业管理员",
        GuestUser   =  "",
        GuestPassword = "",
        AdminRoleName = "内部管理员",
        AdminUser     ="",
        AdminPassword = ""
    }
]


## Logging configuration
#logging_filename = ""
#logging_max_size = 100
#logging_max_age = 7
#logging_local_time = true
#logging_compress = false
#standard_logging = true
#standard_logging_format = "[{{.Timestamp}}] [{{.File}}] {{.Message}}"
#request_logging = true
#request_logging_format = "{{.Client}} - {{.Username}} [{{.Timestamp}}] {{.Host}} {{.RequestMethod}} {{.Upstream}} {{.RequestURI}} {{.Protocol}} {{.UserAgent}} {{.StatusCode}} {{.ResponseSize}} {{.RequestDuration}}"
#auth_logging = true
#auth_logging_format = "{{.Client}} - {{.Username}} [{{.Timestamp}}] [{{.Status}}] {{.Message}}"

## pass HTTP Basic Auth, X-Forwarded-User and X-Forwarded-Email information to upstream
# pass_basic_auth = true
# pass_user_headers = true
## pass the request Host Header to upstream
## when disabled the upstream Host is used as the Host Header
# pass_host_header = true

## Email Domains to allow authentication for (this authorizes any email on this domain)
## for more granular authorization use `authenticated_emails_file`
## To authorize any email addresses use "*"
# email_domains = [
#     "yourcompany.com"
# ]

email_domains = [
    "*"
]

## The OAuth Client ID, Secret
client_id = "J8Kq169h56tm"
client_secret = "dd1492ee1c6e2c0cc72f963134534375"


##provider
provider="unicloud"
#login_url="http://10.0.109.3:12000/uni/oauth/authorize"
#redeem_url="http://10.0.109.3:12000/uni/oauth/token"
#validate_url="http://10.0.109.3:8088/hydrology/debug/usercenter/user/me"
#oidc_issuer_url="http://10.0.109.3:12000/uni/"
#oidc_jwks_url="http://10.0.109.3:12000/uni/oauth/.well-known/jwks.json"

skip_oidc_discovery=true
scope="debug"
access_roles= ["内部管理员"]

## Pass OAuth Access token to upstream via "X-Forwarded-Access-Token"
# pass_access_token = false

## Authenticated Email Addresses File (one email per line)
# authenticated_emails_file = ""

## Htpasswd File (optional)
## Additionally authenticate against a htpasswd file. Entries must be created with "htpasswd -s" for SHA encryption
## enabling exposes a username/login signin form
# htpasswd_file = ""

## Templates
## optional directory with custom sign_in.html and error.html
# custom_templates_dir = ""

## skip SSL checking for HTTPS requests
# ssl_insecure_skip_verify = false


## Cookie Settings
## Name     - the cookie name
## Secret   - the seed string for secure cookies; should be 16, 24, or 32 bytes
##            for use with an AES cipher when cookie_refresh or pass_access_token
##            is set
## Domain   - (optional) cookie domain to force cookies to (ie: .yourcompany.com)
## Expire   - (duration) expire timeframe for cookie
## Refresh  - (duration) refresh the cookie when duration has elapsed after cookie was initially set.
##            Should be less than cookie_expire; set to 0 to disable.
##            On refresh, OAuth token is re-validated.
##            (ie: 1h means tokens are refreshed on request 1hr+ after it was set)
## Secure   - secure cookies are only sent by the browser of a HTTPS connection (recommended)
## HttpOnly - httponly cookies are not readable by javascript (recommended)
cookie_name = "_oauth2_proxy"
cookie_secret = "aWZtb25leWVsc2VoYXBweQ=="
cookie_secure = false
cookie_httponly = true

# cookie_secret = ""
# cookie_domain = ""
# cookie_expire = "30m"
 cookie_refresh = "5m"
# cookie_secure = true
# cookie_httponly = true

